Imagen teko ilman tägiä kun työkansiossa on Dockerfile tiedosto

docker image build .
docker run imageid (edellisestä komennosta)

Imagen teko, tägääminen ja containerin suorittaminen:

- docker image build -t myalpine:latest .
- docker container run -it myalpine:latest


Kaikkien containerian listaaminen

- docker container ls -a

Imagen nimeäminen:

- docker image tag myalpine:latest  dockerhubkäyttäjänimi/myalpine:latest

imgejen lataaminen Githubiin:

docker image push:

HUOM: pitää olla kirjautuneena Dockerhubiin

- docker image push dockerhubkäyttäjänimi/myalpine:latest

Containerin suorittaminen interaktiivisesti:

- docker conatainer run --name C1 -it alpine:latest sh

i = interaktiivinen (standard in) eli syötettä otetaan vastaan ja tulostetaan näytölle mutta prompti on vaillinnainen
t = ottaa käyttöön sudo tty:n eli prompti tulostuu kunnolla

Irottautuminen containerista (detach)

- CTRL + P CTRL + Q

Containerin suorittaminen suoraan detach moodissa

- docker container run --name C1 -d nginx:latest

Kiinnittyminen containeriin (attach), vaatii -it parametrien käytön

- docker container attach C1

Ohjelman suorittaminen containerissa containerin ulkopuolelta

- docker container exec C1 cat /etc/nginx/nginx.conf (tulostaa näytölle)
- docker container exec -it C1 sh (ottaa kiinni conaineriin sh shelliin)


Containerin sammuttaminen:

docker container run --name C1 nginx:latest

- docker container stop C1 (lähettää SIGTERM signaalin jonka ansiosta prosessin PID1 tulisi itse terminoitua -> container terminoituu

- docker container kill C1 (lähetää SIGTERM signaalin joka lopettaa prosessin joka tapauksessa)

# Containerin ajaminen siten että portti 80 on avattu

- docker container run -p 80:80 nginx:latest

# Volumes vs. Bind mounts
https://4sysops.com/archives/introduction-to-docker-bind-mounts-and-volumes/
Volume tulee luoduksi containerin omaan tiedosto osaan host koneella
Bindmount mäppää tietyn hakemiston isäntäkonelta ja vaatii absoluuttisen polun ko. hakemistoon

# Hakemiston bind-mounttaaminen containeriin (bind mount)read only

- docker container run --v (tai --volume) hakemisto/mikä/mountataan:hakemiston/minne/mountataan:ro -p 80:80 nginx/latest

# Nimetyn volumen luominen

- docker container run -it --volume *volumen_nimi*:/minne_mäpätään_containerissa alpine:latest

- tulokset voi tarkastaa shellistä df -h komennolla

- volumen voi liittää toiseen containeriin myöhemmin sillä volumet eivät poistu vaikka container poistuisikin

# Volumejen automaattinen liittäminen käyttöön tietystä conainerista

- docker container run --volumes-from c1 -it --rm alpine:latest

# Mount komennon lyhentäminen:

- docker container run --rm -v ${PWD}:/var/www/html:ro -p 80:80 jounijokelainen/nginx:latest

# Mount vs. volume tyyppinen bind
docker container run --volume "$(pwd)/html":/usr/share/nginx/html:ro -p 80:80 nginx:latest
docker container run --mount type=bind,src="$(pwd)/html",dst=/usr/share/nginx/html,readonly -p 80:80 nginx:latest

# Mikä on volume: https://blog.container-solutions.com/understanding-volumes-docker
https://docs.docker.com/storage/volumes/

# Containerin ajaminen siten että liitetään (bind-mount) host hakemistossa oleva index.html containerissa pyörivään nginx palvelimeen
docker container run --rm --mount type=bind,src="C:\temp\Learn Docker Online\nginx\html",destination=/var/www/html,readonly -p 80:80 nginx:latest

# volumejen listaaminen ja poistaminen
- docker volume ls
- docker volume rm

# Milloin käyttää bindmounttia vs milloin käyttää volumea

bind mounttia: 
- kun samaa tietoa pitää pystyä käsittelemään sekä containerista että hostista
- esim. konfiguraatiotiedostot tai koodi

volume:
- kun halutaan säilyttää containerissa syntyvää dataa
- kun halutaan jakaa tietoa containereiden välilä
- varmuuskopiot

# tiedostojen kopioiminen imageen Dockerfilen avulla
 - COPY komento Dockerfile ssä kopioi tiedostoja imageen
 - COPY kopioi määritettävien kansioiden sisällöt ja siinä voidaan käyttää * merkkiä esim. *.html
 - ADD komento tekee saman mutta se voi kopioida html linkistä esim. ADD ./html.tar.gz /var/www/
 - ADD http://example.com/index.html /var/www/html/example.html
 - kopioitavat tiedostot voidaan ohittaa .dockerignorefile avulla
 
# Container ja verkko
- docker container run --publish (tai -p) 8080:80 -d nginx:latest (ohjaa kaikki verkkoliitännät)
- docker container run --publish 127.0.0.1:80:80 -d nginx:latest (uudelleenohjaa ainaostaan localhostin)
- ip addr (listaa ip asetukset linuxissa/containerissa)

-docker container run -p 80-90:80-90 -d nginx:latest (uudelleen ohjaa kaikki portit väliltä 80-90 portteihin 80-90)

# omat docker verkot
- docker network ls (luo oman verkon)
- docker network create mynet
- docker network inspect mynet (näyttää uuden oman verkon ip-alueen ja muut asetukset)
- docker container run --network mynet --rm -it alpine:latest (luo containerin ja liittää sen mynet verkkoon)
- ip addr (komennolla voi listata ip osoitteet containerin sisällä)
- docker network rm mynet (poistaa mynet verkon)

# nimen selvitys
- dockerissa on containerin sisään rakenttu DNS palvelin
- cat /etc/resolv.conf (dns asetukset)
- docker container run --network mynet --name c2 --rm -it --ip 172.18.0.99 alpine:latest (luo containeri uudella ip osoitteella)
- docker DNS päivittää uuden ip osoitteen DNS:n

# DNS ja linkit yhdessä
- docker container run --network mynet --name postgres --rm -d postgres:9.6.6-alpine (luo containein postgres mynet verkkoon)
- docker container run --network mynet -it --rm --link postgres:pg alpine:latest (luo container mynet verkkoon sekä linkin joka viittaa pg nimellä postgress containeriin)
- ping postgres
- ping pg

# Alias - load balancing
- docker container run -d --network mynet --network-alias webserver nginx:latest (luo containerin webserver aliaksella)
- docker container run -d --network mynet --network-alias webserver nginx:latest (luo 2 containerin webserver aliaksella)
- docker container run -d --network mynet --network-alias webserver nginx:latest (luo 3 containerin webserver aliaksella)
- docker container run --network mynet -it alpine:latest (käynnistää container samaan mynet verkkoon kuin edelliset)
- nslookup webserver (listataan mynet verkossa samalla verkko aliaksella olevaa 3 webserver palvelinta)

# Järjestelmämuuttujat / En vars
- docker container run --name test -it -e "PS1=\h:\w# " jfahrer/myalpine:latest (muuttaa promptin näyttämään hostnimen ja työkansion)
- export PS1="\h:\w# " (jos ajettaisiin erillisellä komennolla shellistä)



