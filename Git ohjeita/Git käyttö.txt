Kuinka luoda Git repository paikallisesti ja puskea se Githubiin

Käyttöönottaminen

1. Asenna git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

2. Asetetaan Git käyttäjätiedot paikalliseen Git sovellukseen.
git config --global user.name "King Kong" 
git config --global user.email "king-kong@gmail.com"

3. Tarkastetaan edellä asetetut asetukset 
git config --list

1. Siirry projektikansioon ja alusta Git komennolla 
git init

2. Tarkasta tiedostot ja kansiot joista git tietää komennolla
git status

3. Uusien ja muuttuneiden tiedostojen lisääminen indeksiin/staging areaan
git add . = lisää kaikki  muuttuneet tiedostot
git add tiedosto1.txt = lisää yhden tiedoston
git add tiedosto1.txt tiedosto2.txt = lisää useamman tiedoston

HUOM On myös komennot jotka lisäävät tiedostot myös git juurikansion alikansiosta (näyttää kyllä siltä että myös git . tekee sen?)
git add --all
git add -a

4. Tarkastetaan indeksiin lisääminen
git status

5. Indeksistä/stagin arealta voi myös poistaa tiedostoja
git rm --cached my-file.ts TAI git reset another-file.js

6. Tehdään commit
git commit -m "Add three files"

7. Indeksiin lisääminen ja commit voidaan tehdä yhdellä komennolla
git commit -a -m "Do something once more"

8. Tiedoston lisääminen viimeisimpään committiin (head) tai koko viimesimmän commitin peruminen

Korjaaminen:
git add file-i-forgot-to-add.html
git commit --amend -m "Add the remaining file"

Peruminen:

git reset --soft HEAD^

Remote repositoryn GitHub käyttö

1. luodaan tarvittaessa uusi Github tunnus ja sinne repository sekä kopioidaan .git linkki talteen

2. Liitetään lokaali repository Githubiin komennolla

git remote add origin https://github.com/YourUsername/some-small-app.git

3. Pusketaan logaalissa repositoryssä oleva koodi Githubiin komennolla
Koodi liitetään master haaraan
HUOM: -u parametrin ansiosta jatkossa riittää pelkkä git push komento

git push -u origin master

4. SSH käyttö Github push komennon kanssa
Edellisen kohdan ongelma on että joka kerta kun annetaan git push komento, joudutaan antamaan salasana ja käyttäjätunnus
Tätä ennen kuitenkin tulee SSH ottaa käyttöön: https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh

git remote add origin git@github.com:YourUsername/your-app.git

5. Tarkastetaan Githubissa olevat repositoryt

git remote -v

Kokonaisen Git repositoryn kloonaaminen omalle koneelle git clone komennolla

HUOM: Windows 10:n virusten ja uhkien torjunta estää gitin toiminnan Documents kansiossa

git clone https://github.com/*Gitkäyttäjänimi*/*repositoryn_nimi*.git

Cloning a repository is very different from pulling from a repository. If you clone a remote repository, Git will:

- Download the entire project into a specified directory; and
- Create a remote repository called origin and point it to the URL you pass.


KLOONAAMINEN

Kopio koko etärepository ja luo kansion paikalliselle koneelle
Asettaa etäkohteen automaattisesti (ei tarvitse tehdä git remote add origin komentoa)

git clone git@github.com:YourUsername/your-app.git
git clone git@github.com:YourUsername/your-app.git this-name-is-much-better (jos halutaan muuttaa paikallisen hakemiston nimi)

MUUTOSTEN VETÄMINEN REMOTE repositorystä (PULL)
Vetää vain muutokset etärepositorystä

Muuttuneiden tiedostojen vetäminen/pull remote repositorystä
1. git pull

When you run the "pull" command, Git will:

- Pull changes in the current branch made by other developers; and
- Synchronize your local repository with the remote repository.

Muuttuneiden tiedostojen puskeminen Git hubiin git push komennolla

1. git push

HAARAT ELI BRANCHIT

1. tarkasta haara jossa toimitaan

    git branch

Luo uusi haara

    git branch *uudenbranchin_nimi*

Vaihda uuteen branchiin

    git checkout *uudenbranchin_nimi*

Luo uusi haara ja vaihda siihen samantien

    git checkout -b *uudenbranchin_nimi*

Haaran poistaminen

    git branch -d *haarannimi* = jos haara on yhdistetty master branchiin ja upattu etärepositoryy
    git branch -D *haarnanimi* = jos haaraa ei ole mergattu ei upattu epärepositoryyn

Haaraan tehtyjen muutosten yhdistäminen master branchiin

    git checkout master = siirrytään takaisin master branchiin
    git merge *uudenbranchin_nimi* = yhdistetään muutokset *uudenbranchin_nimi* branchista


    git branch -d *haarannimi* = jos haara on yhdistetty master branchiin ja upattu etärepositoryy
    git branch -D *haaranimi* = jos haaraa ei ole mergattu ei upattu epärepositoryyn

TÄTÄ TEKSTIÄ EI HALUTA -- BUGIA
































