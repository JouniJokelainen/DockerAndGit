Asennus: https://git-scm.com/download/win

Kuinka luoda Git repository paikallisesti ja puskea se Githubiin

Käyttöönottaminen

1. Asenna git: https://git-scm.com/book/en/v2/Getting-Started-Installing-Git TAI

2. Asetetaan Git käyttäjätiedot paikalliseen Git sovellukseen ja kaikkiin projekteihin
git --version
git config --global user.name "King Kong" 
git config --global user.email "king-kong@gmail.com"
git config user.name "King Kong"  (ilman global) asettaa tiedot vain ko. projektiin. Muut tulevat globalista

3. Tarkastetaan edellä asetetut asetukset 
git config --list
git config user.name (näyttää käyttäjän)

3.1 Ohjeistusta
man git
porcelain komennot ovat niitä yleisimpiä
plumbing komennot ovat harvemmin käytettyjä, esim. skripteissä
git help config (vie suoraan ko. osioon)
git help -a (näyttää lyhemmän apulistan)

1. Siirry projektikansioon ja alusta Git komennolla 
git init

Git pushaaminen GitHub repositoryyn
echo "## GettingStartedWithGit" >> README.md (luo GitHubia varten tarvittavan readme.md tiedoston)

VisualCodessa em. tiedoson avaaminen. HUOM voisi laittaa Markdown preview laajunnuksen myös
code . README.md

Lisätään remote
git remote add origin https://github.com/JouniJokelainen/GettingStartedWithGit.git

Tarkastetaan remotet
git remote -v
git remote show origin

Työnnetään data Githubiin
git remote show origin
git push origin master


2. Tarkasta tiedostot ja kansiot joista git tietää komennolla
git status
git status -s (näyttää tiedon lyhemmässä muodossa)

3. Uusien ja muuttuneiden tiedostojen lisääminen indeksiin/staging areaan
git add . = lisää kaikki  muuttuneet tiedostot
git add tiedosto1.txt = lisää yhden tiedoston
git add tiedosto1.txt tiedosto2.txt = lisää useamman tiedoston

git reset tiedosto1.txt = poistaa indeksiin/staging areaan lisätyn tiedoston

HUOM On myös komennot jotka lisäävät tiedostot myös git juurikansion alikansiosta (näyttää kyllä siltä että myös git . tekee sen?)
git add --all
git add -a

4. Tarkastetaan indeksiin lisääminen
git status

5. Indeksistä/stagin arealta voi myös poistaa tiedostoja
git rm tiedosto.txt (poistaa tiedoston seuratuista ja myös työkansiosta)
git rm --cached my-file.ts TAI git reset another-file.js (poistaa vain indeksista ja staging arealta mutta ei itse tiedostoa)

6. Tehdään commit
git commit -m "Add three files"
git commit (ilman m parametria päästään kirjoittamaan pidempi viesti)

7. Indeksiin lisääminen ja commit voidaan tehdä yhdellä komennolla (eli ohittaa add -a vaihe)
Toimii vain niiden tiedostojen kohdalla joita jo seurataan
git commit -a -m "Do something once more"

8. Tiedoston lisääminen viimeisimpään committiin (head) tai koko viimesimmän commitin peruminen

Korjaaminen:
git add file-i-forgot-to-add.html
git commit --amend -m "Add the remaining file" (lisää edellä lisätyn tiedoston viimeisimpään committiin)

Peruminen:
git reset --soft HEAD~1 (laittaa viimeiseksi commituidut tiedot takaisin staging areaan)
git reset --mixed tai pelkkä git reset (laittaa viimeiset commituidut muutokset takaisin työkansioon)
git reset --hard HEAD~1 (laittaa viimeiset commituidut muutokset roskiin)


Git loki:
git log
git log -5 (näyttää 5 uusinta committia)
git log --oneline (näyttää lyhyessä muodossa)
git log --stat (näyttää tarkempaa tietoa commiteista)
git log --patch (näyttää vielä enemmän kuin edellinen)

Uudelleen nimeäminen
git mv tiedostonvanhanimi.txt tiedostonuusinimi.txt

Remote repositoryn GitHub käyttö

1. luodaan tarvittaessa uusi Github tunnus ja sinne repository sekä kopioidaan .git linkki talteen

2. Liitetään lokaali repository Githubiin komennolla

git remote add origin https://github.com/YourUsername/some-small-app.git

3. Pusketaan logaalissa repositoryssä oleva koodi Githubiin komennolla
Koodi liitetään master haaraan
HUOM: -u parametrin ansiosta jatkossa riittää pelkkä git push komento

git push -u origin master

4. SSH käyttö Github push komennon kanssa
Edellisen kohdan ongelma on että joka kerta kun annetaan git push komento, joudutaan antamaan salasana ja käyttäjätunnus
Tätä ennen kuitenkin tulee SSH ottaa käyttöön: https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh

git remote add origin git@github.com:YourUsername/your-app.git

5. Tarkastetaan Githubissa olevat repositoryt

git remote -v

Kokonaisen Git repositoryn kloonaaminen omalle koneelle git clone komennolla

HUOM: Windows 10:n virusten ja uhkien torjunta estää gitin toiminnan Documents kansiossa

git clone https://github.com/*Gitkäyttäjänimi*/*repositoryn_nimi*.git

Cloning a repository is very different from pulling from a repository. If you clone a remote repository, Git will:

- Download the entire project into a specified directory; and
- Create a remote repository called origin and point it to the URL you pass.


KLOONAAMINEN

Kopio koko etärepository ja luo kansion paikalliselle koneelle
Asettaa etäkohteen automaattisesti (ei tarvitse tehdä git remote add origin komentoa)

git clone git@github.com:YourUsername/your-app.git
git clone git@github.com:YourUsername/your-app.git this-name-is-much-better (jos halutaan muuttaa paikallisen hakemiston nimi)

MUUTOSTEN VETÄMINEN REMOTE repositorystä (PULL)
Vetää vain muutokset etärepositorystä

Muuttuneiden tiedostojen vetäminen/pull remote repositorystä
1. git pull

When you run the "pull" command, Git will:

- Pull changes in the current branch made by other developers; and
- Synchronize your local repository with the remote repository.

Muuttuneiden tiedostojen puskeminen Git hubiin git push komennolla

1. git push

HAARAT ELI BRANCHIT

1. tarkasta haara jossa toimitaan

    git branch

Luo uusi haara

    git branch *uudenbranchin_nimi*

Vaihda toiseen branchiin

    git checkout *uudenbranchin_nimi*

Luo uusi haara ja vaihda siihen samantien

    git checkout -b *uudenbranchin_nimi*

Haaran poistaminen

    git branch -d *haarannimi* = jos haara on yhdistetty master branchiin ja upattu etärepositoryy
    git branch -D *haarnanimi* = jos haaraa ei ole mergattu ei upattu epärepositoryyn

Haaraan tehtyjen muutosten yhdistäminen master branchiin

    git checkout master = siirrytään takaisin master branchiin
    git merge *uudenbranchin_nimi* = yhdistetään muutokset *uudenbranchin_nimi* branchista

    git branch -d *haarannimi* = jos haara on yhdistetty master branchiin ja upattu etärepositoryy
    git branch -D *haaranimi* = jos haaraa ei ole mergattu ei upattu epärepositoryyn


Viimeisimmän muutokset peruminen

git checkout -- *tiedostonnimi*

# Git Stash ja Git stash pop
Jos tilanne on ns. vaiheessa ja pitää vaihtaa toiseen branchiin mutta ei kuitenkaan halua commitoida
Git stash vie jemmaan viimeisimmän commitin jälkeen tapahtuneet muutokset (indeksissä/staged arealla olevat ja ne jotka siellä eivät ole). Nyt voi taas vapaasti commitoida
Stashissa olevat tiedostot eivät mene pushin mukana remoteen
    
    git stash (vie tiedostot stashiin)
    git stash pop (tuo tiedostot stashistä)
    git stash list (listaa stashissä olevat tiedostot)
    git stash show (listaa stashissä olevat tiedostot)
